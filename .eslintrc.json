{
  // https://eslint.org/docs/rules/

  "env": {
    "browser": true,     // browser global variables.
    "jquery": true      // jquery global variables.
  },
  "parserOptions": {
    "ecmaVersion": 8
  },

  "globals": {
      "angular": true
  },

  "plugins": [
    // e.g. "react" (must run `npm install eslint-plugin-react` first)
  ],

  "rules": {
    ////////// Possible Errors //////////

    "comma-dangle": "error",         // disallow trailing commas in object literals
    "no-cond-assign": "error",          // disallow assignment in conditional expressions
//    "no-console": "warn",              // disallow use of console (off by default in the node environment)
    "no-constant-condition": "error",   // disallow use of constant expressions in conditions
    "no-control-regex": "error",        // disallow control characters in regular expressions
    "no-debugger": "error",             // disallow use of debugger
    "no-dupe-keys": "error",            // disallow duplicate keys when creating object literals
    "no-empty": "error",                // disallow empty statements
    "no-empty-character-class:": 0,          // disallow the use of empty character classes in regular expressions
    "no-ex-assign": 0,            // disallow assigning to the exception in a catch block
    "no-extra-boolean-cast": "error",   // disallow double-negation boolean casts in a boolean context
    "no-extra-parens": "error",         // disallow unnecessary parentheses (off by default)
    "no-extra-semi": "error",           // disallow unnecessary semicolons
    "no-func-assign": "error",          // disallow overwriting functions written as function declarations
    "no-inner-declarations": "error",   // disallow function or variable declarations in nested blocks
    "no-invalid-regexp": "error",       // disallow invalid regular expression strings in the RegExp constructor
    "no-irregular-whitespace": "error", // disallow irregular whitespace outside of strings and comments
    "no-negated-in-lhs": 0,       // disallow negation of the left operand of an in expression
    "no-obj-calls": 0,            // disallow the use of object properties of the global object (Math and JSON) as functions
    "no-regex-spaces": "error",         // disallow multiple spaces in a regular expression literal
    "no-sparse-arrays": "error",        // disallow sparse arrays
    "no-unreachable": "error",          // disallow unreachable statements after a return, throw, continue, or break statement
    "use-isnan": 0,               // disallow comparisons with the value NaN
    "valid-jsdoc": 0,             // Ensure JSDoc comments are valid (off by default)
    "valid-typeof": 0,            // Ensure that the results of typeof are compared against a valid string


    ////////// Best Practices //////////

    "block-scoped-var": "error",      // treat var statements as if they were block scoped (off by default)
    "complexity": ["error", 20],            // specify the maximum cyclomatic complexity allowed in a program (off by default)
    "consistent-return": "error",     // require return statements to either always or never specify values
    "curly": "error",                 // specify curly brace conventions for all control statements
    "default-case": "error",          // require default case in switch statements (off by default)
    "dot-notation": "error",          // encourages use of dot notation whenever possible
    "eqeqeq": 0,                // require the use of === and !==
    "guard-for-in": "error",          // make sure for-in loops have an if statement (off by default)
    "no-alert": "error",              // disallow the use of alert, confirm, and prompt
    "no-caller": "warn",             // disallow use of arguments.caller or arguments.callee
    "no-div-regex": 0,          // disallow division operators explicitly at beginning of regular expression (off by default)
    "no-else-return": "error",        // disallow else after a return in an if (off by default)
    "no-empty-function": "error",
    "no-eq-null": "warn",            // disallow comparisons to null without a type-checking operator (off by default)
    "no-eval": "error",               // disallow use of eval()
    "no-extend-native": "error",      // disallow adding to native types
    "no-extra-bind": "error",         // disallow unnecessary function binding
    "no-fallthrough": "error",        // disallow fallthrough of case statements
    "no-floating-decimal": "warn",   // disallow the use of leading or trailing decimal points in numeric literals (off by default)
    "no-implied-eval": "error",       // disallow use of eval()-like methods
    "no-iterator": "error",           // disallow usage of __iterator__ property
    "no-labels": "error",             // disallow use of labeled statements
    "no-lone-blocks": "error",        // disallow unnecessary nested blocks
    "no-loop-func": "error",          // disallow creation of functions within loops
    "no-multi-spaces": "error",       // disallow use of multiple spaces
    "no-multi-str": 0,          // disallow use of multiline strings
    "no-native-reassign": "error",    // disallow reassignments of native objects
    "no-new": "warn",                // disallow use of new operator when not part of the assignment or comparison
    "no-new-func": "error",           // disallow use of new operator for Function object
    "no-new-wrappers": "error",       // disallows creating new instances of String, Number, and Boolean
    "no-octal": "error",              // disallow use of octal literals
    "no-octal-escape": "error",       // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
    "no-process-env": "error",        // disallow use of process.env (off by default)
    "no-proto": "warn",              // disallow usage of __proto__ property
    "no-redeclare": "error",          // disallow declaring the same variable more then once
    "no-return-assign": "error",      // disallow use of assignment in return statement
    "no-script-url": "warn",         // disallow use of javascript: urls.
    "no-self-compare": "error",       // disallow comparisons where both sides are exactly the same (off by default)
    "no-sequences": "warn",          // disallow use of comma operator
    "no-unused-expressions": "error", // disallow usage of expressions in statement position
    "no-void": "error",               // disallow use of void operator (off by default)
    "no-warning-comments": 0,   // disallow usage of configurable warning terms in comments, e.g.
    "no-with": "error",               // disallow use of the with statement
    "radix": 0,                 // require use of the second argument for parseInt() (off by default)
    "vars-on-top": 0,           // requires to declare all vars on top of their containing scope (off by default)
    "wrap-iife": ["error", "inside"],             // require immediate function invocation to be wrapped in parentheses (off by default)
    "yoda": "error",                  // require or disallow Yoda conditions


    ////////// Strict Mode //////////

    "strict": ["warn", "global"],          // controls location of Use Strict Directives


    ////////// Variables //////////

    "no-catch-shadow": 0,             // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
    "no-delete-var": 0,               // disallow deletion of variables
    "no-label-var": 0,                // disallow labels that share a name with a variable
    "no-shadow": "warn",                   // disallow declaration of variables already declared in the outer scope
    "no-shadow-restricted-names": 0,  // disallow shadowing of names such as arguments
    "no-undef": 0,                    // disallow use of undeclared variables unless mentioned in a /*global */ block
    "no-undef-init": "error",               // disallow use of undefined when initializing variables
    "no-undefined": "warn",                // disallow use of undefined variable (off by default)
    "no-unused-vars": 0,              // disallow declaration of variables that are not used in the code
    "no-use-before-define": 0,        // disallow use of variables before they are defined

    ////////// Stylistic Issues //////////

    "brace-style": "warn",               // enforce one true brace style (off by default)
    "camelcase": "warn",                 // require camel case names
    "comma-spacing": "warn",             // enforce spacing before and after comma
    "comma-style": "warn",               // enforce one true comma style (off by default)
    "consistent-this": 0,           // enforces consistent naming when capturing the current execution context (off by default)
    "eol-last": "warn",                  // enforce newline at the end of file, with no multiple empty lines
    "func-names": 0,                // require function expressions to have a name (off by default)
    "func-style": ["warn", "declaration"],                // enforces use of function declarations or expressions (off by default)
    "key-spacing": ["warn", { "beforeColon": false }],               // enforces spacing between keys and values in object literal properties
    "max-nested-callbacks": ["warn", 5],      // specify the maximum depth callbacks can be nested (off by default)
    "new-cap": 0,                   // require a capital letter for constructors
    "new-parens": 0,                // disallow the omission of parentheses when invoking a constructor with no arguments
    "no-array-constructor": "warn",      // disallow use of the Array constructor
    "no-inline-comments": 0,        // disallow comments inline after code (off by default)
    "no-lonely-if": "warn",              // disallow if as the only statement in an else block (off by default)
    "no-mixed-spaces-and-tabs": "warn",  // disallow mixed spaces and tabs for indentation
    "no-multiple-empty-lines": "warn",   // disallow multiple empty lines (off by default)
    "no-nested-ternary": "warn",         // disallow nested ternary expressions (off by default)
    "no-new-object": "warn",             // disallow use of the Object constructor
    "semi-spacing": "warn",              // disallow you to place unnecessary spaces before or after a semicolon.
    "no-spaced-func": "warn",            // disallow space between function identifier and application
    "no-ternary": 0,                // disallow the use of ternary operators (off by default)
    "no-trailing-spaces": 0,        // disallow trailing whitespace at the end of lines
    "no-underscore-dangle": 0,      // disallow dangling underscores in identifiers
    "no-wrap-func": 0,              // disallow wrapping of non-IIFE statements in parens
    "one-var": 0,                   // allow just one var statement per function (off by default)
    "operator-assignment": 0,       // require assignment operator shorthand where possible or prohibit it entirely (off by default)
    "padded-blocks": 0,             // enforce padding within blocks (off by default)
    "quote-props": 0,               // require quotes around object literal property names (off by default)
    "quotes": ["warn", "double"],                    // specify whether double or single quotes should be used
    "semi": ["warn", "always"],                      // require or disallow use of semicolons instead of ASI
    "sort-vars": 0,                 // sort variables within the same declaration block (off by default)
    "space-before-function-paren": 0,
    "keyword-spacing": ["warn", { "before": true, "after": true }], // require a space after function names (off by default)
    "space-before-blocks": ["warn", "always"],       // require or disallow space before blocks (off by default)
    "space-in-brackets": 0,         // require or disallow spaces inside brackets (off by default)
    "space-in-parens": ["warn", "never"],           // require or disallow spaces inside parentheses (off by default)
    "space-infix-ops": 0,           // require spaces around operators
    "space-unary-ops": 0,           // Require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
    "spaced-line-comment": 0,       // require or disallow a space immediately following the // in a line comment (off by default)
    "wrap-regex": 0,                // require regex literals to be wrapped in parentheses (off by default)


    ////////// ECMAScript 6 //////////

    "no-var": 0,          // require let or const instead of var (off by default)
    "generator-star": 0  // enforce the position of the * in generator functions (off by default)
  }
}
