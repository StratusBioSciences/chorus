<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/task
       http://www.springframework.org/schema/task/spring-task.xsd">

    <import resource="classpath:clients-common-context.xml"/>

    <context:property-placeholder ignore-resource-not-found="true"
                                  ignore-unresolvable="true"
                                  location="classpath:autoimporter.properties,
                                  file:${user.home}/uploader.properties"/>
    <context:annotation-config/>
    <context:component-scan base-package="com.infoclinika.mssharing.autoimporter,
                            com.infoclinika.mssharing.clients.common" />

    <task:annotation-driven executor="UploadToAWSExecutor" exception-handler="customAsyncUncaughtExceptionHandler"/>
    <bean id="customAsyncUncaughtExceptionHandler"
          class="com.infoclinika.mssharing.autoimporter.service.impl.CustomAsyncUncaughtExceptionHandler">
        <constructor-arg>
            <list>
                <ref bean="uploadLimitExceededExceptionHandler"/>
            </list>
        </constructor-arg>
    </bean>
    <task:executor id="UploadToAWSExecutor" pool-size="256" />
    <task:executor id="AppConfigService" pool-size="1"/>

    <bean id="alterationMonitor" scope="prototype" class="org.apache.commons.io.monitor.FileAlterationMonitor">
        <constructor-arg value="${monitor.interval}"/>
    </bean>

    <bean id="monitorFactory" class="com.infoclinika.mssharing.autoimporter.service.util.MonitorFactory">
        <lookup-method name="createFileFilter" bean="fileFilterImpl"/>
        <lookup-method name="createMonitor" bean="alterationMonitor"/>
        <lookup-method name="createListener" bean="folderListenerImpl"/>
    </bean>

    <bean id="listenerFactory" class="com.infoclinika.mssharing.autoimporter.service.util.ProgressListenerFactory">
        <lookup-method name="createProgressListener" bean="progressListenerImpl"/>
    </bean>

    <bean id="observableListFactory" class="com.infoclinika.mssharing.autoimporter.service.util.ObservableListFactory">
        <lookup-method name="createObservableWaitList" bean="observableListImpl"/>
        <lookup-method name="createObservableUploadList" bean="observableListImpl"/>
        <lookup-method name="createObservableDuplicateList" bean="observableListImpl"/>
    </bean>

    <bean id="session" class="com.infoclinika.mssharing.autoimporter.model.Session">
        <lookup-method name="createContext" bean="context"/>
    </bean>

    <!--<http-conf:conduit name="restAPI.conduit">
        <http-conf:client
                ConnectionTimeout="600000"
                ReceiveTimeout="600000"
                AllowChunking="false" />
    </http-conf:conduit>-->

    <!-- Logging apache cxf (all input and output queries to web service)

    <bean id="logInbound" class="org.apache.cxf.interceptor.LoggingInInterceptor"/>
    <bean id="logOutbound" class="org.apache.cxf.interceptor.LoggingOutInterceptor"/>

    <cxf:bus>
        <cxf:inInterceptors>
            <ref bean="logInbound"/>
        </cxf:inInterceptors>
        <cxf:outInterceptors>
            <ref bean="logOutbound"/>
        </cxf:outInterceptors>
        <cxf:outFaultInterceptors>
            <ref bean="logOutbound"/>
        </cxf:outFaultInterceptors>
        <cxf:inFaultInterceptors>
            <ref bean="logInbound"/>
        </cxf:inFaultInterceptors>
    </cxf:bus>-->
</beans>
